{{- if $.Values.global.appinfoServiceEnable }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "appinfo-deployment-name" . }}
  labels:
    {{- include "labels.nonlbDeployments" . }}
  annotations:
    {{- include "annotations.nonlbDeployments" . }}
spec:
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      app: {{ template "appinfo-deployment-name" . }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 2
      maxUnavailable: 0
  template:
    metadata:
      labels:
        {{- include "labels.nonlbDeployments" . | indent 4 }}
        app: {{ template "appinfo-deployment-name" . }}
      annotations:
        {{- include "annotations.nonlbDeployments" . | indent 4 }}
        prometheus.io/path: /actuator/prometheus
        prometheus.io/port: {{ .Values.global.containerPorts.monitoringHttp | quote }}
        prometheus.io/scrape: "true"
    spec:
      tolerations: {{ include "ocnf.tolerations" . | nindent 6 }}
      nodeSelector: {{ include "ocnf.nodeselector" . | nindent 8 }}
      volumes:
      - name: conf
        configMap:
          name: {{ template "appinfo-deployment-name" . }}
      containers:
      - env:
        - name: COMMON_CFG_CLIENT_ENABLED
          value: {{ .Values.commonCfgClient.enabled | quote }}
        - name: COMMON_CFG_SERVER_HOST
          value: {{ template "service.ConfigServerSvcFullname" .}}
        - name: COMMON_CFG_SERVER_PORT
          value: {{ .Values.commonCfgServer.port | quote }}
        - name: COMMON_CFG_SERVER_POLLING_INTERVAL
          value: {{ .Values.commonCfgServer.pollingInterval | quote }}
        - name: CONNECTION_TIMEOUT
          value: {{ .Values.commonCfgServer.connectionTimeout | quote}}
        - name: COMMONSERVICE_NAME
          value: {{ .Values.commonServiceName }}
        - name: ISTIO_SIDECAR_QUIT_URL
          value: {{ template "istioproxy.quit.url" . }}
        - name: ISTIO_SIDECAR_READY_URL
          value: {{ template "istioproxy.ready.url" . }}
        - name: SERVICE_MESH_CHECK
          value: {{ template "servicemesh.check" . }}         
        - name: RELEASE_VERSION
          value: {{ template "appinfo.hook.chartVersion" .}}
        - name: LOG_LEVEL_APPINFO
          value: {{ .Values.log.level.appinfo }}
        - name: CONFIG_FILE
          value: /etc/appinfo.yaml
        - name: MONITORING_PORT
          value: {{ .Values.global.containerPorts.monitoringHttp | quote }}
        - name: SIGNALING_PORT
          value: {{ .Values.global.containerPorts.appInfoHttp | quote }}
        - name: GUNICORN_TIMEOUT
          value: {{ .Values.gunicornTimeout | quote }}
        {{- if .Values.imageTag }}
        image: "{{ .Values.global.dockerRegistry }}/{{ .Values.image }}:{{ .Values.imageTag }}"
        {{- else }}
        image: "{{ .Values.global.dockerRegistry }}/{{ .Values.image }}:{{ .Values.global.imageTag }}"
        {{- end }}
        imagePullPolicy: {{ .Values.pullPolicy }}
        name: {{ printf "%s-%s-%s" (include "getprefix" .) "appinfo" (include "getsuffix" .) | trunc 63 | trimPrefix "-"|trimSuffix "-"  }}
        volumeMounts:
        - name: conf
          mountPath: /etc/appinfo.yaml
          subPath: appinfo.yaml
        ports:
          - containerPort: {{ .Values.global.containerPorts.appInfoHttp }}
            name: http-signaling
          - name: {{ .Values.global.cncMetricsName }}
            containerPort: {{ .Values.global.containerPorts.monitoringHttp }}
            protocol: TCP
        livenessProbe:
          httpGet:
            path: /v1/liveness
            port: {{ .Values.global.containerPorts.monitoringHttp }}
            scheme: HTTP
          initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
          successThreshold: {{ .Values.livenessProbe.successThreshold }}
          failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
        readinessProbe:
          httpGet:
            path: /v1/readiness
            port: {{ .Values.global.containerPorts.monitoringHttp }}
            scheme: HTTP
          initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
          successThreshold: {{ .Values.readinessProbe.successThreshold }}
          failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
        resources:
          limits:
            {{- if ne (add .Values.global.logStorage .Values.global.crictlStorage)  0 }}
            ephemeral-storage: {{ .Values.resources.limits.ephemeralStorage | quote }}
            {{- end }}
            cpu: {{ .Values.resources.limits.cpu | quote}}
            memory: {{ .Values.resources.limits.memory | quote}}
          requests:
            {{- if ne (add .Values.global.logStorage .Values.global.crictlStorage)  0 }}
            ephemeral-storage: {{ template "app_info-ephemeral-storage-request" .}}
            {{- end }}
            cpu: {{ .Values.resources.requests.cpu | quote}}
            memory: {{ .Values.resources.requests.memory | quote}}
    {{- include "extraContainers" . | nindent 6}}
      {{- if $.Values.global.serviceAccountName }}
      serviceAccountName: {{ .Values.global.serviceAccountName }}
      {{- else }}
      serviceAccountName: {{ template "appinfo-deployment-name" . }}
      {{- end }}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100 
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: "app.kubernetes.io/name"
                  operator: In
                  values:
                  - {{ template "chart.fullname" .}} 
              topologyKey: "kubernetes.io/hostname"

  {{- end }}
